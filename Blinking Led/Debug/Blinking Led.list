
Blinking Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ac4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001d5c  08001d5c  00011d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001d6c  08001d6c  00011d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001d70  08001d70  00011d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08001d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08001d84  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  08001d84  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000736d  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000011c3  00000000  00000000  000273ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000005f8  00000000  00000000  00028570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000560  00000000  00000000  00028b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000342b1  00000000  00000000  000290c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00006f40  00000000  00000000  0005d379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014d139  00000000  00000000  000642b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001b13f2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001678  00000000  00000000  001b1444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001d44 	.word	0x08001d44

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001d44 	.word	0x08001d44

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 f9d2 	bl	8000684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f816 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f87e 	bl	80003e4 <MX_GPIO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, SET);
 80002e8:	2201      	movs	r2, #1
 80002ea:	2101      	movs	r1, #1
 80002ec:	4807      	ldr	r0, [pc, #28]	; (800030c <main+0x34>)
 80002ee:	f000 fd1f 	bl	8000d30 <HAL_GPIO_WritePin>

	  HAL_Delay(100);
 80002f2:	2064      	movs	r0, #100	; 0x64
 80002f4:	f000 fa58 	bl	80007a8 <HAL_Delay>

	  HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2101      	movs	r1, #1
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <main+0x34>)
 80002fe:	f000 fd17 	bl	8000d30 <HAL_GPIO_WritePin>

	  HAL_Delay(100);
 8000302:	2064      	movs	r0, #100	; 0x64
 8000304:	f000 fa50 	bl	80007a8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, SET);
 8000308:	e7ee      	b.n	80002e8 <main+0x10>
 800030a:	bf00      	nop
 800030c:	58020400 	.word	0x58020400

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b09c      	sub	sp, #112	; 0x70
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800031a:	224c      	movs	r2, #76	; 0x4c
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fd08 	bl	8001d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2220      	movs	r2, #32
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fd02 	bl	8001d34 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000330:	2002      	movs	r0, #2
 8000332:	f000 fd17 	bl	8000d64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000336:	2300      	movs	r3, #0
 8000338:	603b      	str	r3, [r7, #0]
 800033a:	4b28      	ldr	r3, [pc, #160]	; (80003dc <SystemClock_Config+0xcc>)
 800033c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033e:	4a27      	ldr	r2, [pc, #156]	; (80003dc <SystemClock_Config+0xcc>)
 8000340:	f023 0301 	bic.w	r3, r3, #1
 8000344:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000346:	4b25      	ldr	r3, [pc, #148]	; (80003dc <SystemClock_Config+0xcc>)
 8000348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	4b23      	ldr	r3, [pc, #140]	; (80003e0 <SystemClock_Config+0xd0>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000358:	4a21      	ldr	r2, [pc, #132]	; (80003e0 <SystemClock_Config+0xd0>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <SystemClock_Config+0xd0>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000368:	603b      	str	r3, [r7, #0]
 800036a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800036c:	bf00      	nop
 800036e:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <SystemClock_Config+0xd0>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800037a:	d1f8      	bne.n	800036e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800037c:	2302      	movs	r3, #2
 800037e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000380:	2301      	movs	r3, #1
 8000382:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000384:	2340      	movs	r3, #64	; 0x40
 8000386:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000388:	2300      	movs	r3, #0
 800038a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000390:	4618      	mov	r0, r3
 8000392:	f000 fd21 	bl	8000dd8 <HAL_RCC_OscConfig>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800039c:	f000 f876 	bl	800048c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a0:	233f      	movs	r3, #63	; 0x3f
 80003a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2101      	movs	r1, #1
 80003c4:	4618      	mov	r0, r3
 80003c6:	f001 f961 	bl	800168c <HAL_RCC_ClockConfig>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003d0:	f000 f85c 	bl	800048c <Error_Handler>
  }
}
 80003d4:	bf00      	nop
 80003d6:	3770      	adds	r7, #112	; 0x70
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	58000400 	.word	0x58000400
 80003e0:	58024800 	.word	0x58024800

080003e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b088      	sub	sp, #32
 80003e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ea:	f107 030c 	add.w	r3, r7, #12
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fa:	4b21      	ldr	r3, [pc, #132]	; (8000480 <MX_GPIO_Init+0x9c>)
 80003fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000400:	4a1f      	ldr	r2, [pc, #124]	; (8000480 <MX_GPIO_Init+0x9c>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800040a:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <MX_GPIO_Init+0x9c>)
 800040c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b19      	ldr	r3, [pc, #100]	; (8000480 <MX_GPIO_Init+0x9c>)
 800041a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800041e:	4a18      	ldr	r2, [pc, #96]	; (8000480 <MX_GPIO_Init+0x9c>)
 8000420:	f043 0302 	orr.w	r3, r3, #2
 8000424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <MX_GPIO_Init+0x9c>)
 800042a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800042e:	f003 0302 	and.w	r3, r3, #2
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_01_GPIO_Port, LED_01_Pin, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	2101      	movs	r1, #1
 800043a:	4812      	ldr	r0, [pc, #72]	; (8000484 <MX_GPIO_Init+0xa0>)
 800043c:	f000 fc78 	bl	8000d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_01_Pin */
  GPIO_InitStruct.Pin = BTN_01_Pin;
 8000440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000444:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000446:	2300      	movs	r3, #0
 8000448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_01_GPIO_Port, &GPIO_InitStruct);
 800044e:	f107 030c 	add.w	r3, r7, #12
 8000452:	4619      	mov	r1, r3
 8000454:	480c      	ldr	r0, [pc, #48]	; (8000488 <MX_GPIO_Init+0xa4>)
 8000456:	f000 fabb 	bl	80009d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_01_Pin */
  GPIO_InitStruct.Pin = LED_01_Pin;
 800045a:	2301      	movs	r3, #1
 800045c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045e:	2301      	movs	r3, #1
 8000460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_01_GPIO_Port, &GPIO_InitStruct);
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	4619      	mov	r1, r3
 8000470:	4804      	ldr	r0, [pc, #16]	; (8000484 <MX_GPIO_Init+0xa0>)
 8000472:	f000 faad 	bl	80009d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000476:	bf00      	nop
 8000478:	3720      	adds	r7, #32
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	58024400 	.word	0x58024400
 8000484:	58020400 	.word	0x58020400
 8000488:	58020800 	.word	0x58020800

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000494:	e7fe      	b.n	8000494 <Error_Handler+0x8>
	...

08000498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049e:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <HAL_MspInit+0x30>)
 80004a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004a4:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <HAL_MspInit+0x30>)
 80004a6:	f043 0302 	orr.w	r3, r3, #2
 80004aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <HAL_MspInit+0x30>)
 80004b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004b4:	f003 0302 	and.w	r3, r3, #2
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	58024400 	.word	0x58024400

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <NMI_Handler+0x4>

080004d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <HardFault_Handler+0x4>

080004d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <MemManage_Handler+0x4>

080004de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <BusFault_Handler+0x4>

080004e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <UsageFault_Handler+0x4>

080004ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000518:	f000 f926 	bl	8000768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000524:	4b37      	ldr	r3, [pc, #220]	; (8000604 <SystemInit+0xe4>)
 8000526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800052a:	4a36      	ldr	r2, [pc, #216]	; (8000604 <SystemInit+0xe4>)
 800052c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000534:	4b34      	ldr	r3, [pc, #208]	; (8000608 <SystemInit+0xe8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f003 030f 	and.w	r3, r3, #15
 800053c:	2b06      	cmp	r3, #6
 800053e:	d807      	bhi.n	8000550 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000540:	4b31      	ldr	r3, [pc, #196]	; (8000608 <SystemInit+0xe8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f023 030f 	bic.w	r3, r3, #15
 8000548:	4a2f      	ldr	r2, [pc, #188]	; (8000608 <SystemInit+0xe8>)
 800054a:	f043 0307 	orr.w	r3, r3, #7
 800054e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000550:	4b2e      	ldr	r3, [pc, #184]	; (800060c <SystemInit+0xec>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a2d      	ldr	r2, [pc, #180]	; (800060c <SystemInit+0xec>)
 8000556:	f043 0301 	orr.w	r3, r3, #1
 800055a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800055c:	4b2b      	ldr	r3, [pc, #172]	; (800060c <SystemInit+0xec>)
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000562:	4b2a      	ldr	r3, [pc, #168]	; (800060c <SystemInit+0xec>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	4929      	ldr	r1, [pc, #164]	; (800060c <SystemInit+0xec>)
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <SystemInit+0xf0>)
 800056a:	4013      	ands	r3, r2
 800056c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800056e:	4b26      	ldr	r3, [pc, #152]	; (8000608 <SystemInit+0xe8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f003 0308 	and.w	r3, r3, #8
 8000576:	2b00      	cmp	r3, #0
 8000578:	d007      	beq.n	800058a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800057a:	4b23      	ldr	r3, [pc, #140]	; (8000608 <SystemInit+0xe8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f023 030f 	bic.w	r3, r3, #15
 8000582:	4a21      	ldr	r2, [pc, #132]	; (8000608 <SystemInit+0xe8>)
 8000584:	f043 0307 	orr.w	r3, r3, #7
 8000588:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800058a:	4b20      	ldr	r3, [pc, #128]	; (800060c <SystemInit+0xec>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <SystemInit+0xec>)
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000596:	4b1d      	ldr	r3, [pc, #116]	; (800060c <SystemInit+0xec>)
 8000598:	2200      	movs	r2, #0
 800059a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <SystemInit+0xec>)
 800059e:	4a1d      	ldr	r2, [pc, #116]	; (8000614 <SystemInit+0xf4>)
 80005a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80005a2:	4b1a      	ldr	r3, [pc, #104]	; (800060c <SystemInit+0xec>)
 80005a4:	4a1c      	ldr	r2, [pc, #112]	; (8000618 <SystemInit+0xf8>)
 80005a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <SystemInit+0xec>)
 80005aa:	4a1c      	ldr	r2, [pc, #112]	; (800061c <SystemInit+0xfc>)
 80005ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <SystemInit+0xec>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <SystemInit+0xec>)
 80005b6:	4a19      	ldr	r2, [pc, #100]	; (800061c <SystemInit+0xfc>)
 80005b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <SystemInit+0xec>)
 80005bc:	2200      	movs	r2, #0
 80005be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <SystemInit+0xec>)
 80005c2:	4a16      	ldr	r2, [pc, #88]	; (800061c <SystemInit+0xfc>)
 80005c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <SystemInit+0xec>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <SystemInit+0xec>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0e      	ldr	r2, [pc, #56]	; (800060c <SystemInit+0xec>)
 80005d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <SystemInit+0xec>)
 80005da:	2200      	movs	r2, #0
 80005dc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <SystemInit+0x100>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <SystemInit+0x104>)
 80005e4:	4013      	ands	r3, r2
 80005e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005ea:	d202      	bcs.n	80005f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <SystemInit+0x108>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <SystemInit+0x10c>)
 80005f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80005f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	52002000 	.word	0x52002000
 800060c:	58024400 	.word	0x58024400
 8000610:	eaf6ed7f 	.word	0xeaf6ed7f
 8000614:	02020200 	.word	0x02020200
 8000618:	01ff0000 	.word	0x01ff0000
 800061c:	01010280 	.word	0x01010280
 8000620:	5c001000 	.word	0x5c001000
 8000624:	ffff0000 	.word	0xffff0000
 8000628:	51008108 	.word	0x51008108
 800062c:	52004000 	.word	0x52004000

08000630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000668 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000634:	f7ff ff74 	bl	8000520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800063a:	490d      	ldr	r1, [pc, #52]	; (8000670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000640:	e002      	b.n	8000648 <LoopCopyDataInit>

08000642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000646:	3304      	adds	r3, #4

08000648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800064c:	d3f9      	bcc.n	8000642 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000650:	4c0a      	ldr	r4, [pc, #40]	; (800067c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000654:	e001      	b.n	800065a <LoopFillZerobss>

08000656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000658:	3204      	adds	r2, #4

0800065a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800065c:	d3fb      	bcc.n	8000656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800065e:	f001 fb45 	bl	8001cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000662:	f7ff fe39 	bl	80002d8 <main>
  bx  lr
 8000666:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000668:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800066c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000670:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000674:	08001d74 	.word	0x08001d74
  ldr r2, =_sbss
 8000678:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800067c:	24000030 	.word	0x24000030

08000680 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC3_IRQHandler>
	...

08000684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068a:	2003      	movs	r0, #3
 800068c:	f000 f96e 	bl	800096c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000690:	f001 f9b2 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 8000694:	4602      	mov	r2, r0
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_Init+0x68>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	0a1b      	lsrs	r3, r3, #8
 800069c:	f003 030f 	and.w	r3, r3, #15
 80006a0:	4913      	ldr	r1, [pc, #76]	; (80006f0 <HAL_Init+0x6c>)
 80006a2:	5ccb      	ldrb	r3, [r1, r3]
 80006a4:	f003 031f 	and.w	r3, r3, #31
 80006a8:	fa22 f303 	lsr.w	r3, r2, r3
 80006ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_Init+0x68>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <HAL_Init+0x6c>)
 80006b8:	5cd3      	ldrb	r3, [r2, r3]
 80006ba:	f003 031f 	and.w	r3, r3, #31
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	fa22 f303 	lsr.w	r3, r2, r3
 80006c4:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <HAL_Init+0x70>)
 80006c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006c8:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <HAL_Init+0x74>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ce:	200f      	movs	r0, #15
 80006d0:	f000 f814 	bl	80006fc <HAL_InitTick>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
 80006dc:	e002      	b.n	80006e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006de:	f7ff fedb 	bl	8000498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	58024400 	.word	0x58024400
 80006f0:	08001d5c 	.word	0x08001d5c
 80006f4:	24000004 	.word	0x24000004
 80006f8:	24000000 	.word	0x24000000

080006fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_InitTick+0x60>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d101      	bne.n	8000710 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800070c:	2301      	movs	r3, #1
 800070e:	e021      	b.n	8000754 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <HAL_InitTick+0x64>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <HAL_InitTick+0x60>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000722:	fbb2 f3f3 	udiv	r3, r2, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f000 f945 	bl	80009b6 <HAL_SYSTICK_Config>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e00e      	b.n	8000754 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d80a      	bhi.n	8000752 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073c:	2200      	movs	r2, #0
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000744:	f000 f91d 	bl	8000982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <HAL_InitTick+0x68>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
 8000750:	e000      	b.n	8000754 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2400000c 	.word	0x2400000c
 8000760:	24000000 	.word	0x24000000
 8000764:	24000008 	.word	0x24000008

08000768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <HAL_IncTick+0x20>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x24>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_IncTick+0x24>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	2400000c 	.word	0x2400000c
 800078c:	2400002c 	.word	0x2400002c

08000790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  return uwTick;
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <HAL_GetTick+0x14>)
 8000796:	681b      	ldr	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	2400002c 	.word	0x2400002c

080007a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b0:	f7ff ffee 	bl	8000790 <HAL_GetTick>
 80007b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007c0:	d005      	beq.n	80007ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_Delay+0x44>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4413      	add	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ce:	bf00      	nop
 80007d0:	f7ff ffde 	bl	8000790 <HAL_GetTick>
 80007d4:	4602      	mov	r2, r0
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d8f7      	bhi.n	80007d0 <HAL_Delay+0x28>
  {
  }
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2400000c 	.word	0x2400000c

080007f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <HAL_GetREVID+0x14>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	0c1b      	lsrs	r3, r3, #16
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	5c001000 	.word	0x5c001000

08000808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <__NVIC_SetPriorityGrouping+0x40>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <__NVIC_SetPriorityGrouping+0x44>)
 8000832:	4313      	orrs	r3, r2
 8000834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000836:	4a04      	ldr	r2, [pc, #16]	; (8000848 <__NVIC_SetPriorityGrouping+0x40>)
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	60d3      	str	r3, [r2, #12]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00
 800084c:	05fa0000 	.word	0x05fa0000

08000850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <__NVIC_GetPriorityGrouping+0x18>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	f003 0307 	and.w	r3, r3, #7
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000878:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db0a      	blt.n	8000896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	490c      	ldr	r1, [pc, #48]	; (80008b8 <__NVIC_SetPriority+0x4c>)
 8000886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800088a:	0112      	lsls	r2, r2, #4
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	440b      	add	r3, r1
 8000890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000894:	e00a      	b.n	80008ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4908      	ldr	r1, [pc, #32]	; (80008bc <__NVIC_SetPriority+0x50>)
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	3b04      	subs	r3, #4
 80008a4:	0112      	lsls	r2, r2, #4
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	761a      	strb	r2, [r3, #24]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000e100 	.word	0xe000e100
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f1c3 0307 	rsb	r3, r3, #7
 80008da:	2b04      	cmp	r3, #4
 80008dc:	bf28      	it	cs
 80008de:	2304      	movcs	r3, #4
 80008e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3304      	adds	r3, #4
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d902      	bls.n	80008f0 <NVIC_EncodePriority+0x30>
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3b03      	subs	r3, #3
 80008ee:	e000      	b.n	80008f2 <NVIC_EncodePriority+0x32>
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43da      	mvns	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000908:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	43d9      	mvns	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	4313      	orrs	r3, r2
         );
}
 800091a:	4618      	mov	r0, r3
 800091c:	3724      	adds	r7, #36	; 0x24
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000938:	d301      	bcc.n	800093e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093a:	2301      	movs	r3, #1
 800093c:	e00f      	b.n	800095e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <SysTick_Config+0x40>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000946:	210f      	movs	r1, #15
 8000948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800094c:	f7ff ff8e 	bl	800086c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <SysTick_Config+0x40>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <SysTick_Config+0x40>)
 8000958:	2207      	movs	r2, #7
 800095a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	e000e010 	.word	0xe000e010

0800096c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ff47 	bl	8000808 <__NVIC_SetPriorityGrouping>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000990:	f7ff ff5e 	bl	8000850 <__NVIC_GetPriorityGrouping>
 8000994:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	68b9      	ldr	r1, [r7, #8]
 800099a:	6978      	ldr	r0, [r7, #20]
 800099c:	f7ff ff90 	bl	80008c0 <NVIC_EncodePriority>
 80009a0:	4602      	mov	r2, r0
 80009a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff5f 	bl	800086c <__NVIC_SetPriority>
}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ffb2 	bl	8000928 <SysTick_Config>
 80009c4:	4603      	mov	r3, r0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b089      	sub	sp, #36	; 0x24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80009de:	4b89      	ldr	r3, [pc, #548]	; (8000c04 <HAL_GPIO_Init+0x234>)
 80009e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80009e2:	e194      	b.n	8000d0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	2101      	movs	r1, #1
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	fa01 f303 	lsl.w	r3, r1, r3
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f000 8186 	beq.w	8000d08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 0303 	and.w	r3, r3, #3
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d005      	beq.n	8000a14 <HAL_GPIO_Init+0x44>
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d130      	bne.n	8000a76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	2203      	movs	r2, #3
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68da      	ldr	r2, [r3, #12]
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	091b      	lsrs	r3, r3, #4
 8000a60:	f003 0201 	and.w	r2, r3, #1
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f003 0303 	and.w	r3, r3, #3
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d017      	beq.n	8000ab2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	4013      	ands	r3, r2
 8000a98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 0303 	and.w	r3, r3, #3
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d123      	bne.n	8000b06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	08da      	lsrs	r2, r3, #3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	691a      	ldr	r2, [r3, #16]
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	f003 0307 	and.w	r3, r3, #7
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	08da      	lsrs	r2, r3, #3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3208      	adds	r2, #8
 8000b00:	69b9      	ldr	r1, [r7, #24]
 8000b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	2203      	movs	r2, #3
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 0203 	and.w	r2, r3, #3
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 80e0 	beq.w	8000d08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <HAL_GPIO_Init+0x238>)
 8000b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b4e:	4a2e      	ldr	r2, [pc, #184]	; (8000c08 <HAL_GPIO_Init+0x238>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <HAL_GPIO_Init+0x238>)
 8000b5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b66:	4a29      	ldr	r2, [pc, #164]	; (8000c0c <HAL_GPIO_Init+0x23c>)
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	220f      	movs	r2, #15
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4013      	ands	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a20      	ldr	r2, [pc, #128]	; (8000c10 <HAL_GPIO_Init+0x240>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d052      	beq.n	8000c38 <HAL_GPIO_Init+0x268>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a1f      	ldr	r2, [pc, #124]	; (8000c14 <HAL_GPIO_Init+0x244>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d031      	beq.n	8000bfe <HAL_GPIO_Init+0x22e>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a1e      	ldr	r2, [pc, #120]	; (8000c18 <HAL_GPIO_Init+0x248>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d02b      	beq.n	8000bfa <HAL_GPIO_Init+0x22a>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <HAL_GPIO_Init+0x24c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d025      	beq.n	8000bf6 <HAL_GPIO_Init+0x226>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <HAL_GPIO_Init+0x250>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d01f      	beq.n	8000bf2 <HAL_GPIO_Init+0x222>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <HAL_GPIO_Init+0x254>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d019      	beq.n	8000bee <HAL_GPIO_Init+0x21e>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a1a      	ldr	r2, [pc, #104]	; (8000c28 <HAL_GPIO_Init+0x258>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d013      	beq.n	8000bea <HAL_GPIO_Init+0x21a>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a19      	ldr	r2, [pc, #100]	; (8000c2c <HAL_GPIO_Init+0x25c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d00d      	beq.n	8000be6 <HAL_GPIO_Init+0x216>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <HAL_GPIO_Init+0x260>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d007      	beq.n	8000be2 <HAL_GPIO_Init+0x212>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <HAL_GPIO_Init+0x264>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d101      	bne.n	8000bde <HAL_GPIO_Init+0x20e>
 8000bda:	2309      	movs	r3, #9
 8000bdc:	e02d      	b.n	8000c3a <HAL_GPIO_Init+0x26a>
 8000bde:	230a      	movs	r3, #10
 8000be0:	e02b      	b.n	8000c3a <HAL_GPIO_Init+0x26a>
 8000be2:	2308      	movs	r3, #8
 8000be4:	e029      	b.n	8000c3a <HAL_GPIO_Init+0x26a>
 8000be6:	2307      	movs	r3, #7
 8000be8:	e027      	b.n	8000c3a <HAL_GPIO_Init+0x26a>
 8000bea:	2306      	movs	r3, #6
 8000bec:	e025      	b.n	8000c3a <HAL_GPIO_Init+0x26a>
 8000bee:	2305      	movs	r3, #5
 8000bf0:	e023      	b.n	8000c3a <HAL_GPIO_Init+0x26a>
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	e021      	b.n	8000c3a <HAL_GPIO_Init+0x26a>
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e01f      	b.n	8000c3a <HAL_GPIO_Init+0x26a>
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	e01d      	b.n	8000c3a <HAL_GPIO_Init+0x26a>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e01b      	b.n	8000c3a <HAL_GPIO_Init+0x26a>
 8000c02:	bf00      	nop
 8000c04:	58000080 	.word	0x58000080
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58000400 	.word	0x58000400
 8000c10:	58020000 	.word	0x58020000
 8000c14:	58020400 	.word	0x58020400
 8000c18:	58020800 	.word	0x58020800
 8000c1c:	58020c00 	.word	0x58020c00
 8000c20:	58021000 	.word	0x58021000
 8000c24:	58021400 	.word	0x58021400
 8000c28:	58021800 	.word	0x58021800
 8000c2c:	58021c00 	.word	0x58021c00
 8000c30:	58022000 	.word	0x58022000
 8000c34:	58022400 	.word	0x58022400
 8000c38:	2300      	movs	r3, #0
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	f002 0203 	and.w	r2, r2, #3
 8000c40:	0092      	lsls	r2, r2, #2
 8000c42:	4093      	lsls	r3, r2
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c4a:	4938      	ldr	r1, [pc, #224]	; (8000d2c <HAL_GPIO_Init+0x35c>)
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	3302      	adds	r3, #2
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4013      	ands	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000c7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa22 f303 	lsr.w	r3, r2, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f47f ae63 	bne.w	80009e4 <HAL_GPIO_Init+0x14>
  }
}
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	3724      	adds	r7, #36	; 0x24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	58000400 	.word	0x58000400

08000d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d40:	787b      	ldrb	r3, [r7, #1]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d46:	887a      	ldrh	r2, [r7, #2]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000d4c:	e003      	b.n	8000d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	041a      	lsls	r2, r3, #16
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	619a      	str	r2, [r3, #24]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_PWREx_ConfigSupply+0x70>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d00a      	beq.n	8000d8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_PWREx_ConfigSupply+0x70>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d001      	beq.n	8000d8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e01f      	b.n	8000dca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e01d      	b.n	8000dca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_PWREx_ConfigSupply+0x70>)
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	f023 0207 	bic.w	r2, r3, #7
 8000d96:	490f      	ldr	r1, [pc, #60]	; (8000dd4 <HAL_PWREx_ConfigSupply+0x70>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000d9e:	f7ff fcf7 	bl	8000790 <HAL_GetTick>
 8000da2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000da4:	e009      	b.n	8000dba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000da6:	f7ff fcf3 	bl	8000790 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000db4:	d901      	bls.n	8000dba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e007      	b.n	8000dca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_PWREx_ConfigSupply+0x70>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dc6:	d1ee      	bne.n	8000da6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	58024800 	.word	0x58024800

08000dd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	; 0x30
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d102      	bne.n	8000dec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	f000 bc48 	b.w	800167c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 8088 	beq.w	8000f0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dfa:	4b99      	ldr	r3, [pc, #612]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000dfc:	691b      	ldr	r3, [r3, #16]
 8000dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e04:	4b96      	ldr	r3, [pc, #600]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0c:	2b10      	cmp	r3, #16
 8000e0e:	d007      	beq.n	8000e20 <HAL_RCC_OscConfig+0x48>
 8000e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e12:	2b18      	cmp	r3, #24
 8000e14:	d111      	bne.n	8000e3a <HAL_RCC_OscConfig+0x62>
 8000e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d10c      	bne.n	8000e3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e20:	4b8f      	ldr	r3, [pc, #572]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d06d      	beq.n	8000f08 <HAL_RCC_OscConfig+0x130>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d169      	bne.n	8000f08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	f000 bc21 	b.w	800167c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e42:	d106      	bne.n	8000e52 <HAL_RCC_OscConfig+0x7a>
 8000e44:	4b86      	ldr	r3, [pc, #536]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a85      	ldr	r2, [pc, #532]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e02e      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd8>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x9c>
 8000e5a:	4b81      	ldr	r3, [pc, #516]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a80      	ldr	r2, [pc, #512]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b7e      	ldr	r3, [pc, #504]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a7d      	ldr	r2, [pc, #500]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e01d      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd8>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e7c:	d10c      	bne.n	8000e98 <HAL_RCC_OscConfig+0xc0>
 8000e7e:	4b78      	ldr	r3, [pc, #480]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a77      	ldr	r2, [pc, #476]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b75      	ldr	r3, [pc, #468]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a74      	ldr	r2, [pc, #464]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e00b      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd8>
 8000e98:	4b71      	ldr	r3, [pc, #452]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a70      	ldr	r2, [pc, #448]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b6e      	ldr	r3, [pc, #440]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a6d      	ldr	r2, [pc, #436]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d013      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fc6a 	bl	8000790 <HAL_GetTick>
 8000ebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fc66 	bl	8000790 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b64      	cmp	r3, #100	; 0x64
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e3d4      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ed2:	4b63      	ldr	r3, [pc, #396]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f0      	beq.n	8000ec0 <HAL_RCC_OscConfig+0xe8>
 8000ede:	e014      	b.n	8000f0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fc56 	bl	8000790 <HAL_GetTick>
 8000ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fc52 	bl	8000790 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e3c0      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000efa:	4b59      	ldr	r3, [pc, #356]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f0      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x110>
 8000f06:	e000      	b.n	8000f0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 80ca 	beq.w	80010ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f18:	4b51      	ldr	r3, [pc, #324]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f22:	4b4f      	ldr	r3, [pc, #316]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d007      	beq.n	8000f3e <HAL_RCC_OscConfig+0x166>
 8000f2e:	6a3b      	ldr	r3, [r7, #32]
 8000f30:	2b18      	cmp	r3, #24
 8000f32:	d156      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x20a>
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d151      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f3e:	4b48      	ldr	r3, [pc, #288]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d005      	beq.n	8000f56 <HAL_RCC_OscConfig+0x17e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e392      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000f56:	4b42      	ldr	r3, [pc, #264]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f023 0219 	bic.w	r2, r3, #25
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	493f      	ldr	r1, [pc, #252]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f68:	f7ff fc12 	bl	8000790 <HAL_GetTick>
 8000f6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f70:	f7ff fc0e 	bl	8000790 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e37c      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8e:	f7ff fc2f 	bl	80007f0 <HAL_GetREVID>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f241 0203 	movw	r2, #4099	; 0x1003
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d817      	bhi.n	8000fcc <HAL_RCC_OscConfig+0x1f4>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	2b40      	cmp	r3, #64	; 0x40
 8000fa2:	d108      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x1de>
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000fac:	4a2c      	ldr	r2, [pc, #176]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fb4:	e07a      	b.n	80010ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	031b      	lsls	r3, r3, #12
 8000fc4:	4926      	ldr	r1, [pc, #152]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fca:	e06f      	b.n	80010ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	061b      	lsls	r3, r3, #24
 8000fda:	4921      	ldr	r1, [pc, #132]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fe0:	e064      	b.n	80010ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d047      	beq.n	800107a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f023 0219 	bic.w	r2, r3, #25
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	491a      	ldr	r1, [pc, #104]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fbc8 	bl	8000790 <HAL_GetTick>
 8001000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001004:	f7ff fbc4 	bl	8000790 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e332      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f0      	beq.n	8001004 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001022:	f7ff fbe5 	bl	80007f0 <HAL_GetREVID>
 8001026:	4603      	mov	r3, r0
 8001028:	f241 0203 	movw	r2, #4099	; 0x1003
 800102c:	4293      	cmp	r3, r2
 800102e:	d819      	bhi.n	8001064 <HAL_RCC_OscConfig+0x28c>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	2b40      	cmp	r3, #64	; 0x40
 8001036:	d108      	bne.n	800104a <HAL_RCC_OscConfig+0x272>
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 8001042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001046:	6053      	str	r3, [r2, #4]
 8001048:	e030      	b.n	80010ac <HAL_RCC_OscConfig+0x2d4>
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	031b      	lsls	r3, r3, #12
 8001058:	4901      	ldr	r1, [pc, #4]	; (8001060 <HAL_RCC_OscConfig+0x288>)
 800105a:	4313      	orrs	r3, r2
 800105c:	604b      	str	r3, [r1, #4]
 800105e:	e025      	b.n	80010ac <HAL_RCC_OscConfig+0x2d4>
 8001060:	58024400 	.word	0x58024400
 8001064:	4b9a      	ldr	r3, [pc, #616]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	061b      	lsls	r3, r3, #24
 8001072:	4997      	ldr	r1, [pc, #604]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001074:	4313      	orrs	r3, r2
 8001076:	604b      	str	r3, [r1, #4]
 8001078:	e018      	b.n	80010ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800107a:	4b95      	ldr	r3, [pc, #596]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a94      	ldr	r2, [pc, #592]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001080:	f023 0301 	bic.w	r3, r3, #1
 8001084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001086:	f7ff fb83 	bl	8000790 <HAL_GetTick>
 800108a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108e:	f7ff fb7f 	bl	8000790 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e2ed      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010a0:	4b8b      	ldr	r3, [pc, #556]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1f0      	bne.n	800108e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80a9 	beq.w	800120c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ba:	4b85      	ldr	r3, [pc, #532]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010c4:	4b82      	ldr	r3, [pc, #520]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d007      	beq.n	80010e0 <HAL_RCC_OscConfig+0x308>
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b18      	cmp	r3, #24
 80010d4:	d13a      	bne.n	800114c <HAL_RCC_OscConfig+0x374>
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d135      	bne.n	800114c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80010e0:	4b7b      	ldr	r3, [pc, #492]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <HAL_RCC_OscConfig+0x320>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	2b80      	cmp	r3, #128	; 0x80
 80010f2:	d001      	beq.n	80010f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e2c1      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010f8:	f7ff fb7a 	bl	80007f0 <HAL_GetREVID>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001102:	4293      	cmp	r3, r2
 8001104:	d817      	bhi.n	8001136 <HAL_RCC_OscConfig+0x35e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	2b20      	cmp	r3, #32
 800110c:	d108      	bne.n	8001120 <HAL_RCC_OscConfig+0x348>
 800110e:	4b70      	ldr	r3, [pc, #448]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001116:	4a6e      	ldr	r2, [pc, #440]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800111c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800111e:	e075      	b.n	800120c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001120:	4b6b      	ldr	r3, [pc, #428]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	069b      	lsls	r3, r3, #26
 800112e:	4968      	ldr	r1, [pc, #416]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001130:	4313      	orrs	r3, r2
 8001132:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001134:	e06a      	b.n	800120c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001136:	4b66      	ldr	r3, [pc, #408]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	061b      	lsls	r3, r3, #24
 8001144:	4962      	ldr	r1, [pc, #392]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001146:	4313      	orrs	r3, r2
 8001148:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800114a:	e05f      	b.n	800120c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d042      	beq.n	80011da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001154:	4b5e      	ldr	r3, [pc, #376]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a5d      	ldr	r2, [pc, #372]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 800115a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001160:	f7ff fb16 	bl	8000790 <HAL_GetTick>
 8001164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001168:	f7ff fb12 	bl	8000790 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e280      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800117a:	4b55      	ldr	r3, [pc, #340]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001186:	f7ff fb33 	bl	80007f0 <HAL_GetREVID>
 800118a:	4603      	mov	r3, r0
 800118c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001190:	4293      	cmp	r3, r2
 8001192:	d817      	bhi.n	80011c4 <HAL_RCC_OscConfig+0x3ec>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	2b20      	cmp	r3, #32
 800119a:	d108      	bne.n	80011ae <HAL_RCC_OscConfig+0x3d6>
 800119c:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80011a4:	4a4a      	ldr	r2, [pc, #296]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80011a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80011aa:	6053      	str	r3, [r2, #4]
 80011ac:	e02e      	b.n	800120c <HAL_RCC_OscConfig+0x434>
 80011ae:	4b48      	ldr	r3, [pc, #288]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	069b      	lsls	r3, r3, #26
 80011bc:	4944      	ldr	r1, [pc, #272]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]
 80011c2:	e023      	b.n	800120c <HAL_RCC_OscConfig+0x434>
 80011c4:	4b42      	ldr	r3, [pc, #264]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	061b      	lsls	r3, r3, #24
 80011d2:	493f      	ldr	r1, [pc, #252]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60cb      	str	r3, [r1, #12]
 80011d8:	e018      	b.n	800120c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80011da:	4b3d      	ldr	r3, [pc, #244]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a3c      	ldr	r2, [pc, #240]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80011e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff fad3 	bl	8000790 <HAL_GetTick>
 80011ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80011ee:	f7ff facf 	bl	8000790 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e23d      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001200:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f0      	bne.n	80011ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	2b00      	cmp	r3, #0
 8001216:	d036      	beq.n	8001286 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d019      	beq.n	8001254 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001220:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001224:	4a2a      	ldr	r2, [pc, #168]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800122c:	f7ff fab0 	bl	8000790 <HAL_GetTick>
 8001230:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff faac 	bl	8000790 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e21a      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x45c>
 8001252:	e018      	b.n	8001286 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 8001256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001258:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 800125a:	f023 0301 	bic.w	r3, r3, #1
 800125e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001260:	f7ff fa96 	bl	8000790 <HAL_GetTick>
 8001264:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001268:	f7ff fa92 	bl	8000790 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e200      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 800127c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0320 	and.w	r3, r3, #32
 800128e:	2b00      	cmp	r3, #0
 8001290:	d039      	beq.n	8001306 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d01c      	beq.n	80012d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80012a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fa73 	bl	8000790 <HAL_GetTick>
 80012aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ae:	f7ff fa6f 	bl	8000790 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e1dd      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_RCC_OscConfig+0x4f8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f0      	beq.n	80012ae <HAL_RCC_OscConfig+0x4d6>
 80012cc:	e01b      	b.n	8001306 <HAL_RCC_OscConfig+0x52e>
 80012ce:	bf00      	nop
 80012d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012d4:	4b9b      	ldr	r3, [pc, #620]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a9a      	ldr	r2, [pc, #616]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80012da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80012e0:	f7ff fa56 	bl	8000790 <HAL_GetTick>
 80012e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012e8:	f7ff fa52 	bl	8000790 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e1c0      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012fa:	4b92      	ldr	r3, [pc, #584]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8081 	beq.w	8001416 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001314:	4b8c      	ldr	r3, [pc, #560]	; (8001548 <HAL_RCC_OscConfig+0x770>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a8b      	ldr	r2, [pc, #556]	; (8001548 <HAL_RCC_OscConfig+0x770>)
 800131a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001320:	f7ff fa36 	bl	8000790 <HAL_GetTick>
 8001324:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001328:	f7ff fa32 	bl	8000790 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	; 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e1a0      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800133a:	4b83      	ldr	r3, [pc, #524]	; (8001548 <HAL_RCC_OscConfig+0x770>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d106      	bne.n	800135c <HAL_RCC_OscConfig+0x584>
 800134e:	4b7d      	ldr	r3, [pc, #500]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001352:	4a7c      	ldr	r2, [pc, #496]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6713      	str	r3, [r2, #112]	; 0x70
 800135a:	e02d      	b.n	80013b8 <HAL_RCC_OscConfig+0x5e0>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10c      	bne.n	800137e <HAL_RCC_OscConfig+0x5a6>
 8001364:	4b77      	ldr	r3, [pc, #476]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001368:	4a76      	ldr	r2, [pc, #472]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 800136a:	f023 0301 	bic.w	r3, r3, #1
 800136e:	6713      	str	r3, [r2, #112]	; 0x70
 8001370:	4b74      	ldr	r3, [pc, #464]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001374:	4a73      	ldr	r2, [pc, #460]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001376:	f023 0304 	bic.w	r3, r3, #4
 800137a:	6713      	str	r3, [r2, #112]	; 0x70
 800137c:	e01c      	b.n	80013b8 <HAL_RCC_OscConfig+0x5e0>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b05      	cmp	r3, #5
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x5c8>
 8001386:	4b6f      	ldr	r3, [pc, #444]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138a:	4a6e      	ldr	r2, [pc, #440]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6713      	str	r3, [r2, #112]	; 0x70
 8001392:	4b6c      	ldr	r3, [pc, #432]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001396:	4a6b      	ldr	r2, [pc, #428]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6713      	str	r3, [r2, #112]	; 0x70
 800139e:	e00b      	b.n	80013b8 <HAL_RCC_OscConfig+0x5e0>
 80013a0:	4b68      	ldr	r3, [pc, #416]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80013a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a4:	4a67      	ldr	r2, [pc, #412]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80013a6:	f023 0301 	bic.w	r3, r3, #1
 80013aa:	6713      	str	r3, [r2, #112]	; 0x70
 80013ac:	4b65      	ldr	r3, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b0:	4a64      	ldr	r2, [pc, #400]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80013b2:	f023 0304 	bic.w	r3, r3, #4
 80013b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d015      	beq.n	80013ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c0:	f7ff f9e6 	bl	8000790 <HAL_GetTick>
 80013c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013c6:	e00a      	b.n	80013de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c8:	f7ff f9e2 	bl	8000790 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e14e      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013de:	4b59      	ldr	r3, [pc, #356]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0ee      	beq.n	80013c8 <HAL_RCC_OscConfig+0x5f0>
 80013ea:	e014      	b.n	8001416 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ec:	f7ff f9d0 	bl	8000790 <HAL_GetTick>
 80013f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013f2:	e00a      	b.n	800140a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f4:	f7ff f9cc 	bl	8000790 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001402:	4293      	cmp	r3, r2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e138      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800140a:	4b4e      	ldr	r3, [pc, #312]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1ee      	bne.n	80013f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 812d 	beq.w	800167a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001420:	4b48      	ldr	r3, [pc, #288]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001428:	2b18      	cmp	r3, #24
 800142a:	f000 80bd 	beq.w	80015a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	2b02      	cmp	r3, #2
 8001434:	f040 809e 	bne.w	8001574 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001438:	4b42      	ldr	r3, [pc, #264]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a41      	ldr	r2, [pc, #260]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 800143e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff f9a4 	bl	8000790 <HAL_GetTick>
 8001448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff f9a0 	bl	8000790 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e10e      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146a:	4b36      	ldr	r3, [pc, #216]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 800146c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800146e:	4b37      	ldr	r3, [pc, #220]	; (800154c <HAL_RCC_OscConfig+0x774>)
 8001470:	4013      	ands	r3, r2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	430a      	orrs	r2, r1
 800147e:	4931      	ldr	r1, [pc, #196]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001480:	4313      	orrs	r3, r2
 8001482:	628b      	str	r3, [r1, #40]	; 0x28
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	3b01      	subs	r3, #1
 800148a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001492:	3b01      	subs	r3, #1
 8001494:	025b      	lsls	r3, r3, #9
 8001496:	b29b      	uxth	r3, r3
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149e:	3b01      	subs	r3, #1
 80014a0:	041b      	lsls	r3, r3, #16
 80014a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ac:	3b01      	subs	r3, #1
 80014ae:	061b      	lsls	r3, r3, #24
 80014b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80014b4:	4923      	ldr	r1, [pc, #140]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014be:	4a21      	ldr	r2, [pc, #132]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80014c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_RCC_OscConfig+0x778>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014d2:	00d2      	lsls	r2, r2, #3
 80014d4:	491b      	ldr	r1, [pc, #108]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	f023 020c 	bic.w	r2, r3, #12
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4917      	ldr	r1, [pc, #92]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	f023 0202 	bic.w	r2, r3, #2
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	4912      	ldr	r1, [pc, #72]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 800150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150e:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001520:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	4a07      	ldr	r2, [pc, #28]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_RCC_OscConfig+0x76c>)
 8001534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff f929 	bl	8000790 <HAL_GetTick>
 800153e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001540:	e011      	b.n	8001566 <HAL_RCC_OscConfig+0x78e>
 8001542:	bf00      	nop
 8001544:	58024400 	.word	0x58024400
 8001548:	58024800 	.word	0x58024800
 800154c:	fffffc0c 	.word	0xfffffc0c
 8001550:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff f91c 	bl	8000790 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e08a      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001566:	4b47      	ldr	r3, [pc, #284]	; (8001684 <HAL_RCC_OscConfig+0x8ac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x77c>
 8001572:	e082      	b.n	800167a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001574:	4b43      	ldr	r3, [pc, #268]	; (8001684 <HAL_RCC_OscConfig+0x8ac>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a42      	ldr	r2, [pc, #264]	; (8001684 <HAL_RCC_OscConfig+0x8ac>)
 800157a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800157e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff f906 	bl	8000790 <HAL_GetTick>
 8001584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff f902 	bl	8000790 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e070      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800159a:	4b3a      	ldr	r3, [pc, #232]	; (8001684 <HAL_RCC_OscConfig+0x8ac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x7b0>
 80015a6:	e068      	b.n	800167a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80015a8:	4b36      	ldr	r3, [pc, #216]	; (8001684 <HAL_RCC_OscConfig+0x8ac>)
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80015ae:	4b35      	ldr	r3, [pc, #212]	; (8001684 <HAL_RCC_OscConfig+0x8ac>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d031      	beq.n	8001620 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f003 0203 	and.w	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d12a      	bne.n	8001620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d122      	bne.n	8001620 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d11a      	bne.n	8001620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	0a5b      	lsrs	r3, r3, #9
 80015ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d111      	bne.n	8001620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	0c1b      	lsrs	r3, r3, #16
 8001600:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001608:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800160a:	429a      	cmp	r2, r3
 800160c:	d108      	bne.n	8001620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	0e1b      	lsrs	r3, r3, #24
 8001612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e02b      	b.n	800167c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_RCC_OscConfig+0x8ac>)
 8001626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800162e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	429a      	cmp	r2, r3
 8001638:	d01f      	beq.n	800167a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_RCC_OscConfig+0x8ac>)
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	4a11      	ldr	r2, [pc, #68]	; (8001684 <HAL_RCC_OscConfig+0x8ac>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001646:	f7ff f8a3 	bl	8000790 <HAL_GetTick>
 800164a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800164c:	bf00      	nop
 800164e:	f7ff f89f 	bl	8000790 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	4293      	cmp	r3, r2
 8001658:	d0f9      	beq.n	800164e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_RCC_OscConfig+0x8ac>)
 800165c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_RCC_OscConfig+0x8b0>)
 8001660:	4013      	ands	r3, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001666:	00d2      	lsls	r2, r2, #3
 8001668:	4906      	ldr	r1, [pc, #24]	; (8001684 <HAL_RCC_OscConfig+0x8ac>)
 800166a:	4313      	orrs	r3, r2
 800166c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_RCC_OscConfig+0x8ac>)
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <HAL_RCC_OscConfig+0x8ac>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3730      	adds	r7, #48	; 0x30
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	58024400 	.word	0x58024400
 8001688:	ffff0007 	.word	0xffff0007

0800168c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e19c      	b.n	80019da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a0:	4b8a      	ldr	r3, [pc, #552]	; (80018cc <HAL_RCC_ClockConfig+0x240>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d910      	bls.n	80016d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b87      	ldr	r3, [pc, #540]	; (80018cc <HAL_RCC_ClockConfig+0x240>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 020f 	bic.w	r2, r3, #15
 80016b6:	4985      	ldr	r1, [pc, #532]	; (80018cc <HAL_RCC_ClockConfig+0x240>)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b83      	ldr	r3, [pc, #524]	; (80018cc <HAL_RCC_ClockConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e184      	b.n	80019da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d010      	beq.n	80016fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	4b7b      	ldr	r3, [pc, #492]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d908      	bls.n	80016fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80016ec:	4b78      	ldr	r3, [pc, #480]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	4975      	ldr	r1, [pc, #468]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d010      	beq.n	800172c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	4b70      	ldr	r3, [pc, #448]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001716:	429a      	cmp	r2, r3
 8001718:	d908      	bls.n	800172c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800171a:	4b6d      	ldr	r3, [pc, #436]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	496a      	ldr	r1, [pc, #424]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 8001728:	4313      	orrs	r3, r2
 800172a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b00      	cmp	r3, #0
 8001736:	d010      	beq.n	800175a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699a      	ldr	r2, [r3, #24]
 800173c:	4b64      	ldr	r3, [pc, #400]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001744:	429a      	cmp	r2, r3
 8001746:	d908      	bls.n	800175a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001748:	4b61      	ldr	r3, [pc, #388]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	495e      	ldr	r1, [pc, #376]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 8001756:	4313      	orrs	r3, r2
 8001758:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	2b00      	cmp	r3, #0
 8001764:	d010      	beq.n	8001788 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69da      	ldr	r2, [r3, #28]
 800176a:	4b59      	ldr	r3, [pc, #356]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001772:	429a      	cmp	r2, r3
 8001774:	d908      	bls.n	8001788 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001776:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4953      	ldr	r1, [pc, #332]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 8001784:	4313      	orrs	r3, r2
 8001786:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d010      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d908      	bls.n	80017b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a4:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f023 020f 	bic.w	r2, r3, #15
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	4947      	ldr	r1, [pc, #284]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d055      	beq.n	800186e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80017c2:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4940      	ldr	r1, [pc, #256]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d107      	bne.n	80017ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017dc:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d121      	bne.n	800182c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0f6      	b.n	80019da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d107      	bne.n	8001804 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017f4:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d115      	bne.n	800182c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0ea      	b.n	80019da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d107      	bne.n	800181c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0de      	b.n	80019da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800181c:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0d6      	b.n	80019da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	f023 0207 	bic.w	r2, r3, #7
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4925      	ldr	r1, [pc, #148]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 800183a:	4313      	orrs	r3, r2
 800183c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800183e:	f7fe ffa7 	bl	8000790 <HAL_GetTick>
 8001842:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001844:	e00a      	b.n	800185c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001846:	f7fe ffa3 	bl	8000790 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	; 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e0be      	b.n	80019da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	429a      	cmp	r2, r3
 800186c:	d1eb      	bne.n	8001846 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d010      	beq.n	800189c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	429a      	cmp	r2, r3
 8001888:	d208      	bcs.n	800189c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f023 020f 	bic.w	r2, r3, #15
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	490e      	ldr	r1, [pc, #56]	; (80018d0 <HAL_RCC_ClockConfig+0x244>)
 8001898:	4313      	orrs	r3, r2
 800189a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_RCC_ClockConfig+0x240>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d214      	bcs.n	80018d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_RCC_ClockConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 020f 	bic.w	r2, r3, #15
 80018b2:	4906      	ldr	r1, [pc, #24]	; (80018cc <HAL_RCC_ClockConfig+0x240>)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_RCC_ClockConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e086      	b.n	80019da <HAL_RCC_ClockConfig+0x34e>
 80018cc:	52002000 	.word	0x52002000
 80018d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d010      	beq.n	8001902 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_RCC_ClockConfig+0x358>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d208      	bcs.n	8001902 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80018f0:	4b3c      	ldr	r3, [pc, #240]	; (80019e4 <HAL_RCC_ClockConfig+0x358>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	4939      	ldr	r1, [pc, #228]	; (80019e4 <HAL_RCC_ClockConfig+0x358>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d010      	beq.n	8001930 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <HAL_RCC_ClockConfig+0x358>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800191a:	429a      	cmp	r2, r3
 800191c:	d208      	bcs.n	8001930 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800191e:	4b31      	ldr	r3, [pc, #196]	; (80019e4 <HAL_RCC_ClockConfig+0x358>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	492e      	ldr	r1, [pc, #184]	; (80019e4 <HAL_RCC_ClockConfig+0x358>)
 800192c:	4313      	orrs	r3, r2
 800192e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	2b00      	cmp	r3, #0
 800193a:	d010      	beq.n	800195e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699a      	ldr	r2, [r3, #24]
 8001940:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_RCC_ClockConfig+0x358>)
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001948:	429a      	cmp	r2, r3
 800194a:	d208      	bcs.n	800195e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_RCC_ClockConfig+0x358>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4922      	ldr	r1, [pc, #136]	; (80019e4 <HAL_RCC_ClockConfig+0x358>)
 800195a:	4313      	orrs	r3, r2
 800195c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0320 	and.w	r3, r3, #32
 8001966:	2b00      	cmp	r3, #0
 8001968:	d010      	beq.n	800198c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69da      	ldr	r2, [r3, #28]
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_RCC_ClockConfig+0x358>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001976:	429a      	cmp	r2, r3
 8001978:	d208      	bcs.n	800198c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_RCC_ClockConfig+0x358>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4917      	ldr	r1, [pc, #92]	; (80019e4 <HAL_RCC_ClockConfig+0x358>)
 8001988:	4313      	orrs	r3, r2
 800198a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800198c:	f000 f834 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 8001990:	4602      	mov	r2, r0
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <HAL_RCC_ClockConfig+0x358>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	4912      	ldr	r1, [pc, #72]	; (80019e8 <HAL_RCC_ClockConfig+0x35c>)
 800199e:	5ccb      	ldrb	r3, [r1, r3]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
 80019a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <HAL_RCC_ClockConfig+0x358>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <HAL_RCC_ClockConfig+0x35c>)
 80019b4:	5cd3      	ldrb	r3, [r2, r3]
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <HAL_RCC_ClockConfig+0x360>)
 80019c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019c4:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <HAL_RCC_ClockConfig+0x364>)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_RCC_ClockConfig+0x368>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fe94 	bl	80006fc <HAL_InitTick>
 80019d4:	4603      	mov	r3, r0
 80019d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	58024400 	.word	0x58024400
 80019e8:	08001d5c 	.word	0x08001d5c
 80019ec:	24000004 	.word	0x24000004
 80019f0:	24000000 	.word	0x24000000
 80019f4:	24000008 	.word	0x24000008

080019f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019fe:	4bb3      	ldr	r3, [pc, #716]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a06:	2b18      	cmp	r3, #24
 8001a08:	f200 8155 	bhi.w	8001cb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8001a0c:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a12:	bf00      	nop
 8001a14:	08001a79 	.word	0x08001a79
 8001a18:	08001cb7 	.word	0x08001cb7
 8001a1c:	08001cb7 	.word	0x08001cb7
 8001a20:	08001cb7 	.word	0x08001cb7
 8001a24:	08001cb7 	.word	0x08001cb7
 8001a28:	08001cb7 	.word	0x08001cb7
 8001a2c:	08001cb7 	.word	0x08001cb7
 8001a30:	08001cb7 	.word	0x08001cb7
 8001a34:	08001a9f 	.word	0x08001a9f
 8001a38:	08001cb7 	.word	0x08001cb7
 8001a3c:	08001cb7 	.word	0x08001cb7
 8001a40:	08001cb7 	.word	0x08001cb7
 8001a44:	08001cb7 	.word	0x08001cb7
 8001a48:	08001cb7 	.word	0x08001cb7
 8001a4c:	08001cb7 	.word	0x08001cb7
 8001a50:	08001cb7 	.word	0x08001cb7
 8001a54:	08001aa5 	.word	0x08001aa5
 8001a58:	08001cb7 	.word	0x08001cb7
 8001a5c:	08001cb7 	.word	0x08001cb7
 8001a60:	08001cb7 	.word	0x08001cb7
 8001a64:	08001cb7 	.word	0x08001cb7
 8001a68:	08001cb7 	.word	0x08001cb7
 8001a6c:	08001cb7 	.word	0x08001cb7
 8001a70:	08001cb7 	.word	0x08001cb7
 8001a74:	08001aab 	.word	0x08001aab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a78:	4b94      	ldr	r3, [pc, #592]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d009      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001a84:	4b91      	ldr	r3, [pc, #580]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	08db      	lsrs	r3, r3, #3
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	4a90      	ldr	r2, [pc, #576]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
 8001a94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001a96:	e111      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001a98:	4b8d      	ldr	r3, [pc, #564]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a9a:	61bb      	str	r3, [r7, #24]
      break;
 8001a9c:	e10e      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001a9e:	4b8d      	ldr	r3, [pc, #564]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001aa0:	61bb      	str	r3, [r7, #24]
      break;
 8001aa2:	e10b      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001aa4:	4b8c      	ldr	r3, [pc, #560]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001aa6:	61bb      	str	r3, [r7, #24]
      break;
 8001aa8:	e108      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001aaa:	4b88      	ldr	r3, [pc, #544]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001ab4:	4b85      	ldr	r3, [pc, #532]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001abe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ac0:	4b82      	ldr	r3, [pc, #520]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001aca:	4b80      	ldr	r3, [pc, #512]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ace:	08db      	lsrs	r3, r3, #3
 8001ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	ee07 3a90 	vmov	s15, r3
 8001ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80e1 	beq.w	8001cb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	f000 8083 	beq.w	8001bfc <HAL_RCC_GetSysClockFreq+0x204>
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	f200 80a1 	bhi.w	8001c40 <HAL_RCC_GetSysClockFreq+0x248>
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x114>
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d056      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001b0a:	e099      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b0c:	4b6f      	ldr	r3, [pc, #444]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d02d      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001b18:	4b6c      	ldr	r3, [pc, #432]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	4a6b      	ldr	r2, [pc, #428]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b42:	4b62      	ldr	r3, [pc, #392]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b56:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001b72:	e087      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001ce0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b86:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001bb6:	e065      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001ce4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bca:	4b40      	ldr	r3, [pc, #256]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd2:	ee07 3a90 	vmov	s15, r3
 8001bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8001bde:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001bfa:	e043      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c06:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001ce8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c0e:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001c3e:	e021      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001ce4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001c82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	0a5b      	lsrs	r3, r3, #9
 8001c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c8e:	3301      	adds	r3, #1
 8001c90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	ee07 3a90 	vmov	s15, r3
 8001c98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca8:	ee17 3a90 	vmov	r3, s15
 8001cac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001cae:	e005      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
      break;
 8001cb4:	e002      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001cb8:	61bb      	str	r3, [r7, #24]
      break;
 8001cba:	bf00      	nop
  }

  return sysclockfreq;
 8001cbc:	69bb      	ldr	r3, [r7, #24]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	03d09000 	.word	0x03d09000
 8001cd4:	003d0900 	.word	0x003d0900
 8001cd8:	017d7840 	.word	0x017d7840
 8001cdc:	46000000 	.word	0x46000000
 8001ce0:	4c742400 	.word	0x4c742400
 8001ce4:	4a742400 	.word	0x4a742400
 8001ce8:	4bbebc20 	.word	0x4bbebc20

08001cec <__libc_init_array>:
 8001cec:	b570      	push	{r4, r5, r6, lr}
 8001cee:	4d0d      	ldr	r5, [pc, #52]	; (8001d24 <__libc_init_array+0x38>)
 8001cf0:	4c0d      	ldr	r4, [pc, #52]	; (8001d28 <__libc_init_array+0x3c>)
 8001cf2:	1b64      	subs	r4, r4, r5
 8001cf4:	10a4      	asrs	r4, r4, #2
 8001cf6:	2600      	movs	r6, #0
 8001cf8:	42a6      	cmp	r6, r4
 8001cfa:	d109      	bne.n	8001d10 <__libc_init_array+0x24>
 8001cfc:	4d0b      	ldr	r5, [pc, #44]	; (8001d2c <__libc_init_array+0x40>)
 8001cfe:	4c0c      	ldr	r4, [pc, #48]	; (8001d30 <__libc_init_array+0x44>)
 8001d00:	f000 f820 	bl	8001d44 <_init>
 8001d04:	1b64      	subs	r4, r4, r5
 8001d06:	10a4      	asrs	r4, r4, #2
 8001d08:	2600      	movs	r6, #0
 8001d0a:	42a6      	cmp	r6, r4
 8001d0c:	d105      	bne.n	8001d1a <__libc_init_array+0x2e>
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}
 8001d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d14:	4798      	blx	r3
 8001d16:	3601      	adds	r6, #1
 8001d18:	e7ee      	b.n	8001cf8 <__libc_init_array+0xc>
 8001d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d1e:	4798      	blx	r3
 8001d20:	3601      	adds	r6, #1
 8001d22:	e7f2      	b.n	8001d0a <__libc_init_array+0x1e>
 8001d24:	08001d6c 	.word	0x08001d6c
 8001d28:	08001d6c 	.word	0x08001d6c
 8001d2c:	08001d6c 	.word	0x08001d6c
 8001d30:	08001d70 	.word	0x08001d70

08001d34 <memset>:
 8001d34:	4402      	add	r2, r0
 8001d36:	4603      	mov	r3, r0
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d100      	bne.n	8001d3e <memset+0xa>
 8001d3c:	4770      	bx	lr
 8001d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8001d42:	e7f9      	b.n	8001d38 <memset+0x4>

08001d44 <_init>:
 8001d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d46:	bf00      	nop
 8001d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d4a:	bc08      	pop	{r3}
 8001d4c:	469e      	mov	lr, r3
 8001d4e:	4770      	bx	lr

08001d50 <_fini>:
 8001d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d52:	bf00      	nop
 8001d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d56:	bc08      	pop	{r3}
 8001d58:	469e      	mov	lr, r3
 8001d5a:	4770      	bx	lr
